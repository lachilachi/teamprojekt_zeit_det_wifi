// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorld.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "HelloWorld.h"
#include <fstream>
#include <iostream>
#include <fastcdr/Cdr.h>
#include <string>
#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;
using namespace std;

#include <utility>

HelloWorld::HelloWorld()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1622f1b
    m_index = 0;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@70e8f8e
    m_message ="";
    m_data[100*1024*1024] = {0}; //数据缓冲区
    mtest = 666;
}

HelloWorld::~HelloWorld()
{


}

HelloWorld::HelloWorld(const HelloWorld &x)
{
    m_index = x.m_index;
    m_message = x.m_message;
}

HelloWorld::HelloWorld(HelloWorld &&x)
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
}

HelloWorld& HelloWorld::operator=(const HelloWorld &x)
{

    m_index = x.m_index;
    m_message = x.m_message;

    return *this;
}

HelloWorld& HelloWorld::operator=(HelloWorld &&x)
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);

    return *this;
}

size_t HelloWorld::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t HelloWorld::getCdrSerializedSize(const HelloWorld& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void HelloWorld::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_index;
    scdr << m_message;
    scdr << m_data;
    scdr << mtest;
}

void HelloWorld::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_index;
    dcdr >> m_message;
    dcdr >> m_data;
    dcdr >> mtest;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void HelloWorld::index(uint32_t _index)
{
m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t HelloWorld::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& HelloWorld::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void HelloWorld::message(const std::string &_message)
{
m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void HelloWorld::message(std::string &&_message)
{
m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& HelloWorld::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& HelloWorld::message()
{
    return m_message;
}

/*!
 * @brief This function 将数据注入缓冲区
 *
 */
void HelloWorld::mData()
{
    fstream SendFile;     //创建流文件 (输入端)
    SendFile.open("./test2.txt", ios::binary|ios::in);  //打开流文件
    //读取媒体文件
//        SendFile >> m_data ;  //流文件输出到m_data  读取至空格
    SendFile.read(m_data, 100*1024*1024);
    //读取文本适用
    /*string s;
    while(getline(SendFile, s))
    {
        s = s + '\n';
        strcat(m_data, s.c_str());
    }*/
    /*fstream SendFile_copy;     //创建流文件 (输入端)
    SendFile_copy.open("./copy.mp3", ios::binary|ios::out);  //打开流文件

    // 获取文件长度:
    SendFile.seekg (0, ios::end);
    int len = SendFile.tellg();
    //定位到开头
    SendFile.seekg (0, ios::beg);

    while(!SendFile.eof()) {//循环读入数据
        int count = sizeof(m_data) < len ? sizeof(m_data) : len;
        SendFile.read(m_data, count);
        SendFile_copy.write(m_data, count);
        len -= count;
    }*/

    SendFile.close();

}
/*!
 * @brief This function 返回mdata
 * @return reference to mdata
 */
//const char*& HelloWorld::mData() const
//{
//    return m_data;
//}

/*!
 * @brief This function returns mdata
 * @return Reference to mdata
 */
/*std::string& HelloWorld::mData()
{
    return m_data;
}*/


/*!
 * @brief This function returns a reference to member test
 * @return Reference to member test
 */
uint32_t HelloWorld::test()
{
    return mtest;
}

size_t HelloWorld::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool HelloWorld::isKeyDefined()
{
   return false;
}

void HelloWorld::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}
